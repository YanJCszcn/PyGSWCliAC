# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PySwitchCli')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PySwitchCli')
    _PySwitchCli = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PySwitchCli', [dirname(__file__)])
        except ImportError:
            import _PySwitchCli
            return _PySwitchCli
        try:
            _mod = imp.load_module('_PySwitchCli', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PySwitchCli = swig_import_helper()
    del swig_import_helper
else:
    import _PySwitchCli
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def pc_uart_dataread(Offset: 'u16', value: 'u16 *') -> "int":
    return _PySwitchCli.pc_uart_dataread(Offset, value)
pc_uart_dataread = _PySwitchCli.pc_uart_dataread

def pc_uart_datawrite(Offset: 'u16', value: 'u16') -> "int":
    return _PySwitchCli.pc_uart_datawrite(Offset, value)
pc_uart_datawrite = _PySwitchCli.pc_uart_datawrite

def init() -> "int":
    return _PySwitchCli.init()
init = _PySwitchCli.init

def r(addr: 'unsigned short') -> "int":
    return _PySwitchCli.r(addr)
r = _PySwitchCli.r

def w(addr: 'unsigned short', value: 'unsigned short') -> "int":
    return _PySwitchCli.w(addr, value)
w = _PySwitchCli.w

def mdiow(phyid: 'unsigned char', addr: 'unsigned char', value: 'unsigned short') -> "int":
    return _PySwitchCli.mdiow(phyid, addr, value)
mdiow = _PySwitchCli.mdiow

def mdior(phyid: 'unsigned char', addr: 'unsigned char') -> "unsigned short":
    return _PySwitchCli.mdior(phyid, addr)
mdior = _PySwitchCli.mdior

def pyGSW_PceRuleWrite(pattern_nIndex: 'int', pattern_bEnable: 'ltq_bool_t', pattern_bPortIdEnable: 'ltq_bool_t', pattern_nPortId: 'u8', pattern_bDSCP_Enable: 'ltq_bool_t', pattern_nDSCP: 'u8', pattern_bPCP_Enable: 'ltq_bool_t', pattern_nPCP: 'u8', pattern_bSTAG_PCP_DEI_Enable: 'ltq_bool_t', pattern_nSTAG_PCP_DEI: 'u8', pattern_bPktLngEnable: 'ltq_bool_t', pattern_nPktLng: 'u16', pattern_nPktLngRange: 'u16', pattern_bMAC_DstEnable: 'ltq_bool_t', pattern_nMAC_Dst0: 'u8', pattern_nMAC_Dst1: 'u8', pattern_nMAC_Dst2: 'u8', pattern_nMAC_Dst3: 'u8', pattern_nMAC_Dst4: 'u8', pattern_nMAC_Dst5: 'u8', pattern_nMAC_DstMask: 'u16', pattern_bMAC_SrcEnable: 'ltq_bool_t', pattern_nMAC_Src0: 'u8', pattern_nMAC_Src1: 'u8', pattern_nMAC_Src2: 'u8', pattern_nMAC_Src3: 'u8', pattern_nMAC_Src4: 'u8', pattern_nMAC_Src5: 'u8', pattern_nMAC_SrcMask: 'u16', pattern_bAppDataMSB_Enable: 'ltq_bool_t', pattern_nAppDataMSB: 'u16', pattern_bAppMaskRangeMSB_Select: 'ltq_bool_t', pattern_nAppMaskRangeMSB: 'u16', pattern_bAppDataLSB_Enable: 'ltq_bool_t', pattern_nAppDataLSB: 'u16', pattern_bAppMaskRangeLSB_Select: 'ltq_bool_t', pattern_nAppMaskRangeLSB: 'u16', pattern_eDstIP_Select: 'GSW_PCE_IP_t', pattern_nDstIPipv4: 'u32', pattern_nDstIPipv60: 'u8', pattern_nDstIPipv61: 'u8', pattern_nDstIPipv62: 'u8', pattern_nDstIPipv63: 'u8', pattern_nDstIPipv64: 'u8', pattern_nDstIPipv65: 'u8', pattern_nDstIPipv66: 'u8', pattern_nDstIPipv67: 'u8', pattern_nDstIP_Mask: 'u32', pattern_eSrcIP_Select: 'GSW_PCE_IP_t', pattern_nSrcIPipv4: 'u32', pattern_nSrcIPipv60: 'u8', pattern_nSrcIPipv61: 'u8', pattern_nSrcIPipv62: 'u8', pattern_nSrcIPipv63: 'u8', pattern_nSrcIPipv64: 'u8', pattern_nSrcIPipv65: 'u8', pattern_nSrcIPipv66: 'u8', pattern_nSrcIPipv67: 'u8', pattern_nSrcIP_Mask: 'u32', pattern_bEtherTypeEnable: 'ltq_bool_t', pattern_nEtherType: 'u16', pattern_nEtherTypeMask: 'u16', pattern_bProtocolEnable: 'ltq_bool_t', pattern_nProtocol: 'u8', pattern_nProtocolMask: 'u8', pattern_bSessionIdEnable: 'ltq_bool_t', pattern_nSessionId: 'u16', pattern_bVid: 'ltq_bool_t', pattern_nVid: 'u16', pattern_bVidRange_Select: 'ltq_bool_t', pattern_nVidRange: 'u16', pattern_bSLAN_Vid: 'ltq_bool_t', pattern_nSLAN_Vid: 'u16', action_eTrafficClassAction: 'GSW_PCE_ActionTrafficClass_t', action_nTrafficClassAlternate: 'u8', action_eSnoopingTypeAction: 'GSW_PCE_ActionIGMP_Snoop_t', action_eLearningAction: 'GSW_PCE_ActionLearning_t', action_eIrqAction: 'GSW_PCE_ActionIrq_t', action_eCrossStateAction: 'GSW_PCE_ActionCrossState_t', action_eCritFrameAction: 'GSW_PCE_ActionCriticalFrame_t', action_eTimestampAction: 'GSW_PCE_ActionTimestamp_t', action_ePortMapAction: 'GSW_PCE_ActionPortmap_t', action_nForwardPortMap: 'u32', action_bRemarkAction: 'ltq_bool_t', action_bRemarkPCP: 'ltq_bool_t', action_bRemarkSTAG_PCP: 'ltq_bool_t', action_bRemarkSTAG_DEI: 'ltq_bool_t', action_bRemarkDSCP: 'ltq_bool_t', action_bRemarkClass: 'ltq_bool_t', action_eMeterAction: 'GSW_PCE_ActionMeter_t', action_nMeterId: 'u8', action_bRMON_Action: 'ltq_bool_t', action_nRMON_Id: 'u8', action_eVLAN_Action: 'GSW_PCE_ActionVLAN_t', action_nVLAN_Id: 'u16', action_nFId: 'u8', action_eSVLAN_Action: 'GSW_PCE_ActionVLAN_t', action_nSVLAN_Id: 'u16', action_eVLAN_CrossAction: 'GSW_PCE_ActionCrossVLAN_t', action_bCVLAN_Ignore_Control: 'ltq_bool_t', action_bPortBitMapMuxControl: 'ltq_bool_t', action_bPortTrunkAction: 'ltq_bool_t', action_bPortLinkSelection: 'ltq_bool_t', action_bFlowID_Action: 'ltq_bool_t', action_nFlowID: 'u16') -> "int":
    return _PySwitchCli.pyGSW_PceRuleWrite(pattern_nIndex, pattern_bEnable, pattern_bPortIdEnable, pattern_nPortId, pattern_bDSCP_Enable, pattern_nDSCP, pattern_bPCP_Enable, pattern_nPCP, pattern_bSTAG_PCP_DEI_Enable, pattern_nSTAG_PCP_DEI, pattern_bPktLngEnable, pattern_nPktLng, pattern_nPktLngRange, pattern_bMAC_DstEnable, pattern_nMAC_Dst0, pattern_nMAC_Dst1, pattern_nMAC_Dst2, pattern_nMAC_Dst3, pattern_nMAC_Dst4, pattern_nMAC_Dst5, pattern_nMAC_DstMask, pattern_bMAC_SrcEnable, pattern_nMAC_Src0, pattern_nMAC_Src1, pattern_nMAC_Src2, pattern_nMAC_Src3, pattern_nMAC_Src4, pattern_nMAC_Src5, pattern_nMAC_SrcMask, pattern_bAppDataMSB_Enable, pattern_nAppDataMSB, pattern_bAppMaskRangeMSB_Select, pattern_nAppMaskRangeMSB, pattern_bAppDataLSB_Enable, pattern_nAppDataLSB, pattern_bAppMaskRangeLSB_Select, pattern_nAppMaskRangeLSB, pattern_eDstIP_Select, pattern_nDstIPipv4, pattern_nDstIPipv60, pattern_nDstIPipv61, pattern_nDstIPipv62, pattern_nDstIPipv63, pattern_nDstIPipv64, pattern_nDstIPipv65, pattern_nDstIPipv66, pattern_nDstIPipv67, pattern_nDstIP_Mask, pattern_eSrcIP_Select, pattern_nSrcIPipv4, pattern_nSrcIPipv60, pattern_nSrcIPipv61, pattern_nSrcIPipv62, pattern_nSrcIPipv63, pattern_nSrcIPipv64, pattern_nSrcIPipv65, pattern_nSrcIPipv66, pattern_nSrcIPipv67, pattern_nSrcIP_Mask, pattern_bEtherTypeEnable, pattern_nEtherType, pattern_nEtherTypeMask, pattern_bProtocolEnable, pattern_nProtocol, pattern_nProtocolMask, pattern_bSessionIdEnable, pattern_nSessionId, pattern_bVid, pattern_nVid, pattern_bVidRange_Select, pattern_nVidRange, pattern_bSLAN_Vid, pattern_nSLAN_Vid, action_eTrafficClassAction, action_nTrafficClassAlternate, action_eSnoopingTypeAction, action_eLearningAction, action_eIrqAction, action_eCrossStateAction, action_eCritFrameAction, action_eTimestampAction, action_ePortMapAction, action_nForwardPortMap, action_bRemarkAction, action_bRemarkPCP, action_bRemarkSTAG_PCP, action_bRemarkSTAG_DEI, action_bRemarkDSCP, action_bRemarkClass, action_eMeterAction, action_nMeterId, action_bRMON_Action, action_nRMON_Id, action_eVLAN_Action, action_nVLAN_Id, action_nFId, action_eSVLAN_Action, action_nSVLAN_Id, action_eVLAN_CrossAction, action_bCVLAN_Ignore_Control, action_bPortBitMapMuxControl, action_bPortTrunkAction, action_bPortLinkSelection, action_bFlowID_Action, action_nFlowID)
pyGSW_PceRuleWrite = _PySwitchCli.pyGSW_PceRuleWrite

def pyGSW_PceRuleRead(idx: 'int') -> "int":
    return _PySwitchCli.pyGSW_PceRuleRead(idx)
pyGSW_PceRuleRead = _PySwitchCli.pyGSW_PceRuleRead

def pyGSW_8021X_EAPOL_RuleGet(nForwardPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_8021X_EAPOL_RuleGet(nForwardPortId)
pyGSW_8021X_EAPOL_RuleGet = _PySwitchCli.pyGSW_8021X_EAPOL_RuleGet

def pyGSW_8021X_EAPOL_RuleSet(eForwardPort: 'GSW_portForward_t', nForwardPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_8021X_EAPOL_RuleSet(eForwardPort, nForwardPortId)
pyGSW_8021X_EAPOL_RuleSet = _PySwitchCli.pyGSW_8021X_EAPOL_RuleSet

def pyGSW_8021X_PortCfgGet(nPortId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_8021X_PortCfgGet(nPortId)
pyGSW_8021X_PortCfgGet = _PySwitchCli.pyGSW_8021X_PortCfgGet

def pyGSW_8021X_PortCfgSet(nPortId: 'u32', eState: 'GSW_8021X_portState_t') -> "int":
    return _PySwitchCli.pyGSW_8021X_PortCfgSet(nPortId, eState)
pyGSW_8021X_PortCfgSet = _PySwitchCli.pyGSW_8021X_PortCfgSet

def pyGSW_MAC_TableClear() -> "int":
    return _PySwitchCli.pyGSW_MAC_TableClear()
pyGSW_MAC_TableClear = _PySwitchCli.pyGSW_MAC_TableClear

def pyGSW_MAC_TableEntryAdd(nFId: 'u32', nPortId: 'u32', nAgeTimer: 'int', nSVLAN_Id: 'u16', bStaticEntry: 'ltq_bool_t', nTrafficClass: 'u8', nMAC0: 'u8', nMAC1: 'u8', nMAC2: 'u8', nMAC3: 'u8', nMAC4: 'u8', nMAC5: 'u8') -> "int":
    return _PySwitchCli.pyGSW_MAC_TableEntryAdd(nFId, nPortId, nAgeTimer, nSVLAN_Id, bStaticEntry, nTrafficClass, nMAC0, nMAC1, nMAC2, nMAC3, nMAC4, nMAC5)
pyGSW_MAC_TableEntryAdd = _PySwitchCli.pyGSW_MAC_TableEntryAdd

def pyGSW_MAC_TableEntryQuery(nMAC0: 'u8', nMAC1: 'u8', nMAC2: 'u8', nMAC3: 'u8', nMAC4: 'u8', nMAC5: 'u8', nFId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_MAC_TableEntryQuery(nMAC0, nMAC1, nMAC2, nMAC3, nMAC4, nMAC5, nFId)
pyGSW_MAC_TableEntryQuery = _PySwitchCli.pyGSW_MAC_TableEntryQuery

def pyGSW_MAC_TableEntryRead(bInitial: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_MAC_TableEntryRead(bInitial)
pyGSW_MAC_TableEntryRead = _PySwitchCli.pyGSW_MAC_TableEntryRead

def pyGSW_MAC_TableEntryRemove(nFId: 'u32', nMAC0: 'u8', nMAC1: 'u8', nMAC2: 'u8', nMAC3: 'u8', nMAC4: 'u8', nMAC5: 'u8') -> "int":
    return _PySwitchCli.pyGSW_MAC_TableEntryRemove(nFId, nMAC0, nMAC1, nMAC2, nMAC3, nMAC4, nMAC5)
pyGSW_MAC_TableEntryRemove = _PySwitchCli.pyGSW_MAC_TableEntryRemove

def pyGSW_STP_BPDU_RuleGet() -> "int":
    return _PySwitchCli.pyGSW_STP_BPDU_RuleGet()
pyGSW_STP_BPDU_RuleGet = _PySwitchCli.pyGSW_STP_BPDU_RuleGet

def pyGSW_STP_BPDU_RuleSet(eForwardPort: 'GSW_portForward_t', nForwardPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_STP_BPDU_RuleSet(eForwardPort, nForwardPortId)
pyGSW_STP_BPDU_RuleSet = _PySwitchCli.pyGSW_STP_BPDU_RuleSet

def pyGSW_STP_PortCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_STP_PortCfgGet(nPortId)
pyGSW_STP_PortCfgGet = _PySwitchCli.pyGSW_STP_PortCfgGet

def pyGSW_STP_PortCfgSet(nPortId: 'u8', nFId: 'u32', ePortState: 'GSW_STP_PortState_t') -> "int":
    return _PySwitchCli.pyGSW_STP_PortCfgSet(nPortId, nFId, ePortState)
pyGSW_STP_PortCfgSet = _PySwitchCli.pyGSW_STP_PortCfgSet

def pyGSW_TrunkingCfgGet() -> "int":
    return _PySwitchCli.pyGSW_TrunkingCfgGet()
pyGSW_TrunkingCfgGet = _PySwitchCli.pyGSW_TrunkingCfgGet

def pyGSW_TrunkingCfgSet(bIP_Src: 'ltq_bool_t', bIP_Dst: 'ltq_bool_t', bMAC_Src: 'ltq_bool_t', bMAC_Dst: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_TrunkingCfgSet(bIP_Src, bIP_Dst, bMAC_Src, bMAC_Dst)
pyGSW_TrunkingCfgSet = _PySwitchCli.pyGSW_TrunkingCfgSet

def pyGSW_TrunkingPortCfgGet(nPortId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_TrunkingPortCfgGet(nPortId)
pyGSW_TrunkingPortCfgGet = _PySwitchCli.pyGSW_TrunkingPortCfgGet

def pyGSW_TrunkingPortCfgSet(bAggregateEnable: 'ltq_bool_t', nPortId: 'u32', nAggrPortId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_TrunkingPortCfgSet(bAggregateEnable, nPortId, nAggrPortId)
pyGSW_TrunkingPortCfgSet = _PySwitchCli.pyGSW_TrunkingPortCfgSet

def pyGSW_SVLAN_CfgGet() -> "int":
    return _PySwitchCli.pyGSW_SVLAN_CfgGet()
pyGSW_SVLAN_CfgGet = _PySwitchCli.pyGSW_SVLAN_CfgGet

def pyGSW_SVLAN_CfgSet(nEthertype: 'u16') -> "int":
    return _PySwitchCli.pyGSW_SVLAN_CfgSet(nEthertype)
pyGSW_SVLAN_CfgSet = _PySwitchCli.pyGSW_SVLAN_CfgSet

def pyGSW_SVLAN_PortCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_SVLAN_PortCfgGet(nPortId)
pyGSW_SVLAN_PortCfgGet = _PySwitchCli.pyGSW_SVLAN_PortCfgGet

def pyGSW_SVLAN_PortCfgSet(nPortId: 'u8', bSVLAN_TagSupport: 'ltq_bool_t', bSVLAN_MACbasedTag: 'ltq_bool_t', nPortVId: 'u16', bVLAN_ReAssign: 'ltq_bool_t', eVLAN_MemberViolation: 'GSW_VLAN_MemberViolation_t', eAdmitMode: 'GSW_VLAN_Admit_t') -> "int":
    return _PySwitchCli.pyGSW_SVLAN_PortCfgSet(nPortId, bSVLAN_TagSupport, bSVLAN_MACbasedTag, nPortVId, bVLAN_ReAssign, eVLAN_MemberViolation, eAdmitMode)
pyGSW_SVLAN_PortCfgSet = _PySwitchCli.pyGSW_SVLAN_PortCfgSet

def pyGSW_VLAN_Member_Init(nPortMemberMap: 'u32', nEgressTagMap: 'u32') -> "int":
    return _PySwitchCli.pyGSW_VLAN_Member_Init(nPortMemberMap, nEgressTagMap)
pyGSW_VLAN_Member_Init = _PySwitchCli.pyGSW_VLAN_Member_Init

def pyGSW_VLAN_IdCreate(nVId: 'u16', nFId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_VLAN_IdCreate(nVId, nFId)
pyGSW_VLAN_IdCreate = _PySwitchCli.pyGSW_VLAN_IdCreate

def pyGSW_VLAN_IdDelete(nVId: 'u16') -> "int":
    return _PySwitchCli.pyGSW_VLAN_IdDelete(nVId)
pyGSW_VLAN_IdDelete = _PySwitchCli.pyGSW_VLAN_IdDelete

def pyGSW_VLAN_IdGet(nVId: 'u16') -> "int":
    return _PySwitchCli.pyGSW_VLAN_IdGet(nVId)
pyGSW_VLAN_IdGet = _PySwitchCli.pyGSW_VLAN_IdGet

def pyGSW_VLAN_PortCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_VLAN_PortCfgGet(nPortId)
pyGSW_VLAN_PortCfgGet = _PySwitchCli.pyGSW_VLAN_PortCfgGet

def pyGSW_VLAN_PortCfgSet(nPortId: 'u8', nPortVId: 'u16', bVLAN_UnknownDrop: 'ltq_bool_t', bVLAN_ReAssign: 'ltq_bool_t', eVLAN_MemberViolation: 'GSW_VLAN_MemberViolation_t', eAdmitMode: 'GSW_VLAN_Admit_t', bTVM: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_VLAN_PortCfgSet(nPortId, nPortVId, bVLAN_UnknownDrop, bVLAN_ReAssign, eVLAN_MemberViolation, eAdmitMode, bTVM)
pyGSW_VLAN_PortCfgSet = _PySwitchCli.pyGSW_VLAN_PortCfgSet

def pyGSW_VLAN_PortMemberAdd(nVId: 'u16', nPortId: 'u32', bVLAN_TagEgress: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_VLAN_PortMemberAdd(nVId, nPortId, bVLAN_TagEgress)
pyGSW_VLAN_PortMemberAdd = _PySwitchCli.pyGSW_VLAN_PortMemberAdd

def pyGSW_VLAN_PortMemberRead(bInitial: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_VLAN_PortMemberRead(bInitial)
pyGSW_VLAN_PortMemberRead = _PySwitchCli.pyGSW_VLAN_PortMemberRead

def pyGSW_VLAN_PortMemberRemove(nVId: 'u16', nPortId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_VLAN_PortMemberRemove(nVId, nPortId)
pyGSW_VLAN_PortMemberRemove = _PySwitchCli.pyGSW_VLAN_PortMemberRemove

def pyGSW_VLAN_ReservedAdd(nVId: 'u16') -> "int":
    return _PySwitchCli.pyGSW_VLAN_ReservedAdd(nVId)
pyGSW_VLAN_ReservedAdd = _PySwitchCli.pyGSW_VLAN_ReservedAdd

def pyGSW_VLAN_ReservedRemove(nVId: 'u16') -> "int":
    return _PySwitchCli.pyGSW_VLAN_ReservedRemove(nVId)
pyGSW_VLAN_ReservedRemove = _PySwitchCli.pyGSW_VLAN_ReservedRemove

def pyGSW_QoS_ClassDSCP_Get() -> "int":
    return _PySwitchCli.pyGSW_QoS_ClassDSCP_Get()
pyGSW_QoS_ClassDSCP_Get = _PySwitchCli.pyGSW_QoS_ClassDSCP_Get

def pyGSW_QoS_ClassDSCP_Set(nTrafficClass: 'u8', nDSCP0: 'u8', nDSCP1: 'u8', nDSCP2: 'u8', nDSCP3: 'u8', nDSCP4: 'u8', nDSCP5: 'u8', nDSCP6: 'u8', nDSCP7: 'u8', nDSCP8: 'u8', nDSCP9: 'u8', nDSCP10: 'u8', nDSCP11: 'u8', nDSCP12: 'u8', nDSCP13: 'u8', nDSCP14: 'u8', nDSCP15: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_ClassDSCP_Set(nTrafficClass, nDSCP0, nDSCP1, nDSCP2, nDSCP3, nDSCP4, nDSCP5, nDSCP6, nDSCP7, nDSCP8, nDSCP9, nDSCP10, nDSCP11, nDSCP12, nDSCP13, nDSCP14, nDSCP15)
pyGSW_QoS_ClassDSCP_Set = _PySwitchCli.pyGSW_QoS_ClassDSCP_Set

def pyGSW_QoS_ClassPCP_Get() -> "int":
    return _PySwitchCli.pyGSW_QoS_ClassPCP_Get()
pyGSW_QoS_ClassPCP_Get = _PySwitchCli.pyGSW_QoS_ClassPCP_Get

def pyGSW_QoS_ClassPCP_Set(nTrafficClass: 'u8', nPCP0: 'u8', nPCP1: 'u8', nPCP2: 'u8', nPCP3: 'u8', nPCP4: 'u8', nPCP5: 'u8', nPCP6: 'u8', nPCP7: 'u8', nPCP8: 'u8', nPCP9: 'u8', nPCP10: 'u8', nPCP11: 'u8', nPCP12: 'u8', nPCP13: 'u8', nPCP14: 'u8', nPCP15: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_ClassPCP_Set(nTrafficClass, nPCP0, nPCP1, nPCP2, nPCP3, nPCP4, nPCP5, nPCP6, nPCP7, nPCP8, nPCP9, nPCP10, nPCP11, nPCP12, nPCP13, nPCP14, nPCP15)
pyGSW_QoS_ClassPCP_Set = _PySwitchCli.pyGSW_QoS_ClassPCP_Set

def pyGSW_QoS_DSCP_ClassGet() -> "int":
    return _PySwitchCli.pyGSW_QoS_DSCP_ClassGet()
pyGSW_QoS_DSCP_ClassGet = _PySwitchCli.pyGSW_QoS_DSCP_ClassGet

def pyGSW_QoS_DSCP_ClassSet(nDSCP: 'u32', nTrafficClass0: 'u8', nTrafficClass1: 'u8', nTrafficClass2: 'u8', nTrafficClass3: 'u8', nTrafficClass4: 'u8', nTrafficClass5: 'u8', nTrafficClass6: 'u8', nTrafficClass7: 'u8', nTrafficClass8: 'u8', nTrafficClass9: 'u8', nTrafficClass10: 'u8', nTrafficClass11: 'u8', nTrafficClass12: 'u8', nTrafficClass13: 'u8', nTrafficClass14: 'u8', nTrafficClass15: 'u8', nTrafficClass16: 'u8', nTrafficClass17: 'u8', nTrafficClass18: 'u8', nTrafficClass19: 'u8', nTrafficClass20: 'u8', nTrafficClass21: 'u8', nTrafficClass22: 'u8', nTrafficClass23: 'u8', nTrafficClass24: 'u8', nTrafficClass25: 'u8', nTrafficClass26: 'u8', nTrafficClass27: 'u8', nTrafficClass28: 'u8', nTrafficClass29: 'u8', nTrafficClass30: 'u8', nTrafficClass31: 'u8', nTrafficClass32: 'u8', nTrafficClass33: 'u8', nTrafficClass34: 'u8', nTrafficClass35: 'u8', nTrafficClass36: 'u8', nTrafficClass37: 'u8', nTrafficClass38: 'u8', nTrafficClass39: 'u8', nTrafficClass40: 'u8', nTrafficClass41: 'u8', nTrafficClass42: 'u8', nTrafficClass43: 'u8', nTrafficClass44: 'u8', nTrafficClass45: 'u8', nTrafficClass46: 'u8', nTrafficClass47: 'u8', nTrafficClass48: 'u8', nTrafficClass49: 'u8', nTrafficClass50: 'u8', nTrafficClass51: 'u8', nTrafficClass52: 'u8', nTrafficClass53: 'u8', nTrafficClass54: 'u8', nTrafficClass55: 'u8', nTrafficClass56: 'u8', nTrafficClass57: 'u8', nTrafficClass58: 'u8', nTrafficClass59: 'u8', nTrafficClass60: 'u8', nTrafficClass61: 'u8', nTrafficClass62: 'u8', nTrafficClass63: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_DSCP_ClassSet(nDSCP, nTrafficClass0, nTrafficClass1, nTrafficClass2, nTrafficClass3, nTrafficClass4, nTrafficClass5, nTrafficClass6, nTrafficClass7, nTrafficClass8, nTrafficClass9, nTrafficClass10, nTrafficClass11, nTrafficClass12, nTrafficClass13, nTrafficClass14, nTrafficClass15, nTrafficClass16, nTrafficClass17, nTrafficClass18, nTrafficClass19, nTrafficClass20, nTrafficClass21, nTrafficClass22, nTrafficClass23, nTrafficClass24, nTrafficClass25, nTrafficClass26, nTrafficClass27, nTrafficClass28, nTrafficClass29, nTrafficClass30, nTrafficClass31, nTrafficClass32, nTrafficClass33, nTrafficClass34, nTrafficClass35, nTrafficClass36, nTrafficClass37, nTrafficClass38, nTrafficClass39, nTrafficClass40, nTrafficClass41, nTrafficClass42, nTrafficClass43, nTrafficClass44, nTrafficClass45, nTrafficClass46, nTrafficClass47, nTrafficClass48, nTrafficClass49, nTrafficClass50, nTrafficClass51, nTrafficClass52, nTrafficClass53, nTrafficClass54, nTrafficClass55, nTrafficClass56, nTrafficClass57, nTrafficClass58, nTrafficClass59, nTrafficClass60, nTrafficClass61, nTrafficClass62, nTrafficClass63)
pyGSW_QoS_DSCP_ClassSet = _PySwitchCli.pyGSW_QoS_DSCP_ClassSet

def pyGSW_QoS_DSCP_DropPrecedenceCfgGet() -> "int":
    return _PySwitchCli.pyGSW_QoS_DSCP_DropPrecedenceCfgGet()
pyGSW_QoS_DSCP_DropPrecedenceCfgGet = _PySwitchCli.pyGSW_QoS_DSCP_DropPrecedenceCfgGet

def pyGSW_QoS_DSCP_DropPrecedenceCfgSet(nDSCP: 'u8', nDSCP_DropPrecedence0: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence1: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence2: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence3: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence4: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence5: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence6: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence7: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence8: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence9: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence10: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence11: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence12: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence13: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence14: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence15: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence16: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence17: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence18: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence19: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence20: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence21: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence22: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence23: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence24: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence25: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence26: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence27: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence28: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence29: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence30: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence31: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence32: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence33: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence34: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence35: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence36: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence37: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence38: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence39: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence40: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence41: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence42: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence43: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence44: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence45: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence46: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence47: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence48: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence49: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence50: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence51: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence52: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence53: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence54: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence55: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence56: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence57: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence58: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence59: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence60: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence61: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence62: 'GSW_QoS_DropPrecedence_t', nDSCP_DropPrecedence63: 'GSW_QoS_DropPrecedence_t') -> "int":
    return _PySwitchCli.pyGSW_QoS_DSCP_DropPrecedenceCfgSet(nDSCP, nDSCP_DropPrecedence0, nDSCP_DropPrecedence1, nDSCP_DropPrecedence2, nDSCP_DropPrecedence3, nDSCP_DropPrecedence4, nDSCP_DropPrecedence5, nDSCP_DropPrecedence6, nDSCP_DropPrecedence7, nDSCP_DropPrecedence8, nDSCP_DropPrecedence9, nDSCP_DropPrecedence10, nDSCP_DropPrecedence11, nDSCP_DropPrecedence12, nDSCP_DropPrecedence13, nDSCP_DropPrecedence14, nDSCP_DropPrecedence15, nDSCP_DropPrecedence16, nDSCP_DropPrecedence17, nDSCP_DropPrecedence18, nDSCP_DropPrecedence19, nDSCP_DropPrecedence20, nDSCP_DropPrecedence21, nDSCP_DropPrecedence22, nDSCP_DropPrecedence23, nDSCP_DropPrecedence24, nDSCP_DropPrecedence25, nDSCP_DropPrecedence26, nDSCP_DropPrecedence27, nDSCP_DropPrecedence28, nDSCP_DropPrecedence29, nDSCP_DropPrecedence30, nDSCP_DropPrecedence31, nDSCP_DropPrecedence32, nDSCP_DropPrecedence33, nDSCP_DropPrecedence34, nDSCP_DropPrecedence35, nDSCP_DropPrecedence36, nDSCP_DropPrecedence37, nDSCP_DropPrecedence38, nDSCP_DropPrecedence39, nDSCP_DropPrecedence40, nDSCP_DropPrecedence41, nDSCP_DropPrecedence42, nDSCP_DropPrecedence43, nDSCP_DropPrecedence44, nDSCP_DropPrecedence45, nDSCP_DropPrecedence46, nDSCP_DropPrecedence47, nDSCP_DropPrecedence48, nDSCP_DropPrecedence49, nDSCP_DropPrecedence50, nDSCP_DropPrecedence51, nDSCP_DropPrecedence52, nDSCP_DropPrecedence53, nDSCP_DropPrecedence54, nDSCP_DropPrecedence55, nDSCP_DropPrecedence56, nDSCP_DropPrecedence57, nDSCP_DropPrecedence58, nDSCP_DropPrecedence59, nDSCP_DropPrecedence60, nDSCP_DropPrecedence61, nDSCP_DropPrecedence62, nDSCP_DropPrecedence63)
pyGSW_QoS_DSCP_DropPrecedenceCfgSet = _PySwitchCli.pyGSW_QoS_DSCP_DropPrecedenceCfgSet

def pyGSW_QoS_FlowctrlCfgGet() -> "int":
    return _PySwitchCli.pyGSW_QoS_FlowctrlCfgGet()
pyGSW_QoS_FlowctrlCfgGet = _PySwitchCli.pyGSW_QoS_FlowctrlCfgGet

def pyGSW_QoS_FlowctrlCfgSet(nFlowCtrlNonConform_Min: 'u32', nFlowCtrlNonConform_Max: 'u32', nFlowCtrlConform_Min: 'u32', nFlowCtrlConform_Max: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_FlowctrlCfgSet(nFlowCtrlNonConform_Min, nFlowCtrlNonConform_Max, nFlowCtrlConform_Min, nFlowCtrlConform_Max)
pyGSW_QoS_FlowctrlCfgSet = _PySwitchCli.pyGSW_QoS_FlowctrlCfgSet

def pyGSW_QoS_FlowctrlPortCfgGet(nPortId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_FlowctrlPortCfgGet(nPortId)
pyGSW_QoS_FlowctrlPortCfgGet = _PySwitchCli.pyGSW_QoS_FlowctrlPortCfgGet

def pyGSW_QoS_FlowctrlPortCfgSet(nPortId: 'u32', nFlowCtrl_Min: 'u32', nFlowCtrl_Max: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_FlowctrlPortCfgSet(nPortId, nFlowCtrl_Min, nFlowCtrl_Max)
pyGSW_QoS_FlowctrlPortCfgSet = _PySwitchCli.pyGSW_QoS_FlowctrlPortCfgSet

def pyGSW_QoS_MeterCfgGet(nMeterId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_MeterCfgGet(nMeterId)
pyGSW_QoS_MeterCfgGet = _PySwitchCli.pyGSW_QoS_MeterCfgGet

def pyGSW_QoS_MeterCfgSet(bEnable: 'ltq_bool_t', nMeterId: 'u32', nCbs: 'u32', nEbs: 'u32', nRate: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_MeterCfgSet(bEnable, nMeterId, nCbs, nEbs, nRate)
pyGSW_QoS_MeterCfgSet = _PySwitchCli.pyGSW_QoS_MeterCfgSet

def pyGSW_QoS_MeterPortAssign(nMeterId: 'u32', eDir: 'GSW_direction_t', nPortIngressId: 'u32', nPortEgressId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_MeterPortAssign(nMeterId, eDir, nPortIngressId, nPortEgressId)
pyGSW_QoS_MeterPortAssign = _PySwitchCli.pyGSW_QoS_MeterPortAssign

def pyGSW_QoS_MeterPortDeassign(nMeterId: 'u32', nPortIngressId: 'u32', nPortEgressId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_MeterPortDeassign(nMeterId, nPortIngressId, nPortEgressId)
pyGSW_QoS_MeterPortDeassign = _PySwitchCli.pyGSW_QoS_MeterPortDeassign

def pyGSW_QoS_MeterPortGet(bInitial: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_QoS_MeterPortGet(bInitial)
pyGSW_QoS_MeterPortGet = _PySwitchCli.pyGSW_QoS_MeterPortGet

def pyGSW_QoS_PCP_ClassGet() -> "int":
    return _PySwitchCli.pyGSW_QoS_PCP_ClassGet()
pyGSW_QoS_PCP_ClassGet = _PySwitchCli.pyGSW_QoS_PCP_ClassGet

def pyGSW_QoS_PCP_ClassSet(nPCP: 'u8', nTrafficClass0: 'u8', nTrafficClass1: 'u8', nTrafficClass2: 'u8', nTrafficClass3: 'u8', nTrafficClass4: 'u8', nTrafficClass5: 'u8', nTrafficClass6: 'u8', nTrafficClass7: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_PCP_ClassSet(nPCP, nTrafficClass0, nTrafficClass1, nTrafficClass2, nTrafficClass3, nTrafficClass4, nTrafficClass5, nTrafficClass6, nTrafficClass7)
pyGSW_QoS_PCP_ClassSet = _PySwitchCli.pyGSW_QoS_PCP_ClassSet

def pyGSW_QoS_PortCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_PortCfgGet(nPortId)
pyGSW_QoS_PortCfgGet = _PySwitchCli.pyGSW_QoS_PortCfgGet

def pyGSW_QoS_PortCfgSet(nPortId: 'u8', eClassMode: 'GSW_QoS_ClassSelect_t', nTrafficClass: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_PortCfgSet(nPortId, eClassMode, nTrafficClass)
pyGSW_QoS_PortCfgSet = _PySwitchCli.pyGSW_QoS_PortCfgSet

def pyGSW_QoS_PortRemarkingCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_PortRemarkingCfgGet(nPortId)
pyGSW_QoS_PortRemarkingCfgGet = _PySwitchCli.pyGSW_QoS_PortRemarkingCfgGet

def pyGSW_QoS_PortRemarkingCfgSet(nPortId: 'u8', eDSCP_IngressRemarkingEnable: 'GSW_Qos_ingressRemarking_t', bDSCP_EgressRemarkingEnable: 'ltq_bool_t', bPCP_IngressRemarkingEnable: 'ltq_bool_t', bPCP_EgressRemarkingEnable: 'ltq_bool_t', bSTAG_PCP_IngressRemarkingEnable: 'ltq_bool_t', bSTAG_DEI_IngressRemarkingEnable: 'ltq_bool_t', bSTAG_PCP_DEI_EgressRemarkingEnable: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_QoS_PortRemarkingCfgSet(nPortId, eDSCP_IngressRemarkingEnable, bDSCP_EgressRemarkingEnable, bPCP_IngressRemarkingEnable, bPCP_EgressRemarkingEnable, bSTAG_PCP_IngressRemarkingEnable, bSTAG_DEI_IngressRemarkingEnable, bSTAG_PCP_DEI_EgressRemarkingEnable)
pyGSW_QoS_PortRemarkingCfgSet = _PySwitchCli.pyGSW_QoS_PortRemarkingCfgSet

def pyGSW_QoS_QueueBufferReserveCfgGet(nQueueId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_QueueBufferReserveCfgGet(nQueueId)
pyGSW_QoS_QueueBufferReserveCfgGet = _PySwitchCli.pyGSW_QoS_QueueBufferReserveCfgGet

def pyGSW_QoS_QueueBufferReserveCfgSet(nQueueId: 'u8', nBufferReserved: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_QueueBufferReserveCfgSet(nQueueId, nBufferReserved)
pyGSW_QoS_QueueBufferReserveCfgSet = _PySwitchCli.pyGSW_QoS_QueueBufferReserveCfgSet

def pyGSW_QoS_QueuePortGet(nPortId: 'u8', nTrafficClassId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_QueuePortGet(nPortId, nTrafficClassId)
pyGSW_QoS_QueuePortGet = _PySwitchCli.pyGSW_QoS_QueuePortGet

def pyGSW_QoS_QueuePortSet(nPortId: 'u8', nTrafficClassId: 'u8', nQueueId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_QueuePortSet(nPortId, nTrafficClassId, nQueueId)
pyGSW_QoS_QueuePortSet = _PySwitchCli.pyGSW_QoS_QueuePortSet

def pyGSW_QoS_SVLAN_ClassPCP_PortGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_SVLAN_ClassPCP_PortGet(nPortId)
pyGSW_QoS_SVLAN_ClassPCP_PortGet = _PySwitchCli.pyGSW_QoS_SVLAN_ClassPCP_PortGet

def pyGSW_QoS_SVLAN_ClassPCP_PortSet(nPortId: 'u8', nTrafficClass: 'u8', nCPCP0: 'u8', nCPCP1: 'u8', nCPCP2: 'u8', nCPCP3: 'u8', nCPCP4: 'u8', nCPCP5: 'u8', nCPCP6: 'u8', nCPCP7: 'u8', nCPCP8: 'u8', nCPCP9: 'u8', nCPCP10: 'u8', nCPCP11: 'u8', nCPCP12: 'u8', nCPCP13: 'u8', nCPCP14: 'u8', nCPCP15: 'u8', nSPCP0: 'u8', nSPCP1: 'u8', nSPCP2: 'u8', nSPCP3: 'u8', nSPCP4: 'u8', nSPCP5: 'u8', nSPCP6: 'u8', nSPCP7: 'u8', nSPCP8: 'u8', nSPCP9: 'u8', nSPCP10: 'u8', nSPCP11: 'u8', nSPCP12: 'u8', nSPCP13: 'u8', nSPCP14: 'u8', nSPCP15: 'u8', nDSCP0: 'u8', nDSCP1: 'u8', nDSCP2: 'u8', nDSCP3: 'u8', nDSCP4: 'u8', nDSCP5: 'u8', nDSCP6: 'u8', nDSCP7: 'u8', nDSCP8: 'u8', nDSCP9: 'u8', nDSCP10: 'u8', nDSCP11: 'u8', nDSCP12: 'u8', nDSCP13: 'u8', nDSCP14: 'u8', nDSCP15: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_SVLAN_ClassPCP_PortSet(nPortId, nTrafficClass, nCPCP0, nCPCP1, nCPCP2, nCPCP3, nCPCP4, nCPCP5, nCPCP6, nCPCP7, nCPCP8, nCPCP9, nCPCP10, nCPCP11, nCPCP12, nCPCP13, nCPCP14, nCPCP15, nSPCP0, nSPCP1, nSPCP2, nSPCP3, nSPCP4, nSPCP5, nSPCP6, nSPCP7, nSPCP8, nSPCP9, nSPCP10, nSPCP11, nSPCP12, nSPCP13, nSPCP14, nSPCP15, nDSCP0, nDSCP1, nDSCP2, nDSCP3, nDSCP4, nDSCP5, nDSCP6, nDSCP7, nDSCP8, nDSCP9, nDSCP10, nDSCP11, nDSCP12, nDSCP13, nDSCP14, nDSCP15)
pyGSW_QoS_SVLAN_ClassPCP_PortSet = _PySwitchCli.pyGSW_QoS_SVLAN_ClassPCP_PortSet

def pyGSW_QoS_SVLAN_PCP_ClassGet() -> "int":
    return _PySwitchCli.pyGSW_QoS_SVLAN_PCP_ClassGet()
pyGSW_QoS_SVLAN_PCP_ClassGet = _PySwitchCli.pyGSW_QoS_SVLAN_PCP_ClassGet

def pyGSW_QoS_SVLAN_PCP_ClassSet(nTrafficClass0: 'u8', nTrafficClass1: 'u8', nTrafficClass2: 'u8', nTrafficClass3: 'u8', nTrafficClass4: 'u8', nTrafficClass5: 'u8', nTrafficClass6: 'u8', nTrafficClass7: 'u8', nTrafficClass8: 'u8', nTrafficClass9: 'u8', nTrafficClass10: 'u8', nTrafficClass11: 'u8', nTrafficClass12: 'u8', nTrafficClass13: 'u8', nTrafficClass14: 'u8', nTrafficClass15: 'u8', nTrafficColor0: 'u8', nTrafficColor1: 'u8', nTrafficColor2: 'u8', nTrafficColor3: 'u8', nTrafficColor4: 'u8', nTrafficColor5: 'u8', nTrafficColor6: 'u8', nTrafficColor7: 'u8', nTrafficColor8: 'u8', nTrafficColor9: 'u8', nTrafficColor10: 'u8', nTrafficColor11: 'u8', nTrafficColor12: 'u8', nTrafficColor13: 'u8', nTrafficColor14: 'u8', nTrafficColor15: 'u8', nPCP_Remark_Enable0: 'u8', nPCP_Remark_Enable1: 'u8', nPCP_Remark_Enable2: 'u8', nPCP_Remark_Enable3: 'u8', nPCP_Remark_Enable4: 'u8', nPCP_Remark_Enable5: 'u8', nPCP_Remark_Enable6: 'u8', nPCP_Remark_Enable7: 'u8', nPCP_Remark_Enable8: 'u8', nPCP_Remark_Enable9: 'u8', nPCP_Remark_Enable10: 'u8', nPCP_Remark_Enable11: 'u8', nPCP_Remark_Enable12: 'u8', nPCP_Remark_Enable13: 'u8', nPCP_Remark_Enable14: 'u8', nPCP_Remark_Enable15: 'u8', nDEI_Remark_Enable0: 'u8', nDEI_Remark_Enable1: 'u8', nDEI_Remark_Enable2: 'u8', nDEI_Remark_Enable3: 'u8', nDEI_Remark_Enable4: 'u8', nDEI_Remark_Enable5: 'u8', nDEI_Remark_Enable6: 'u8', nDEI_Remark_Enable7: 'u8', nDEI_Remark_Enable8: 'u8', nDEI_Remark_Enable9: 'u8', nDEI_Remark_Enable10: 'u8', nDEI_Remark_Enable11: 'u8', nDEI_Remark_Enable12: 'u8', nDEI_Remark_Enable13: 'u8', nDEI_Remark_Enable14: 'u8', nDEI_Remark_Enable15: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_SVLAN_PCP_ClassSet(nTrafficClass0, nTrafficClass1, nTrafficClass2, nTrafficClass3, nTrafficClass4, nTrafficClass5, nTrafficClass6, nTrafficClass7, nTrafficClass8, nTrafficClass9, nTrafficClass10, nTrafficClass11, nTrafficClass12, nTrafficClass13, nTrafficClass14, nTrafficClass15, nTrafficColor0, nTrafficColor1, nTrafficColor2, nTrafficColor3, nTrafficColor4, nTrafficColor5, nTrafficColor6, nTrafficColor7, nTrafficColor8, nTrafficColor9, nTrafficColor10, nTrafficColor11, nTrafficColor12, nTrafficColor13, nTrafficColor14, nTrafficColor15, nPCP_Remark_Enable0, nPCP_Remark_Enable1, nPCP_Remark_Enable2, nPCP_Remark_Enable3, nPCP_Remark_Enable4, nPCP_Remark_Enable5, nPCP_Remark_Enable6, nPCP_Remark_Enable7, nPCP_Remark_Enable8, nPCP_Remark_Enable9, nPCP_Remark_Enable10, nPCP_Remark_Enable11, nPCP_Remark_Enable12, nPCP_Remark_Enable13, nPCP_Remark_Enable14, nPCP_Remark_Enable15, nDEI_Remark_Enable0, nDEI_Remark_Enable1, nDEI_Remark_Enable2, nDEI_Remark_Enable3, nDEI_Remark_Enable4, nDEI_Remark_Enable5, nDEI_Remark_Enable6, nDEI_Remark_Enable7, nDEI_Remark_Enable8, nDEI_Remark_Enable9, nDEI_Remark_Enable10, nDEI_Remark_Enable11, nDEI_Remark_Enable12, nDEI_Remark_Enable13, nDEI_Remark_Enable14, nDEI_Remark_Enable15)
pyGSW_QoS_SVLAN_PCP_ClassSet = _PySwitchCli.pyGSW_QoS_SVLAN_PCP_ClassSet

def pyGSW_QoS_SchedulerCfgGet(nQueueId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_SchedulerCfgGet(nQueueId)
pyGSW_QoS_SchedulerCfgGet = _PySwitchCli.pyGSW_QoS_SchedulerCfgGet

def pyGSW_QoS_SchedulerCfgSet(nQueueId: 'u8', eType: 'GSW_QoS_Scheduler_t', nWeight: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_SchedulerCfgSet(nQueueId, eType, nWeight)
pyGSW_QoS_SchedulerCfgSet = _PySwitchCli.pyGSW_QoS_SchedulerCfgSet

def pyGSW_QoS_ShaperCfgGet(nRateShaperId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_ShaperCfgGet(nRateShaperId)
pyGSW_QoS_ShaperCfgGet = _PySwitchCli.pyGSW_QoS_ShaperCfgGet

def pyGSW_QoS_ShaperCfgSet(nRateShaperId: 'u32', bEnable: 'ltq_bool_t', bAVB: 'ltq_bool_t', nCbs: 'u32', nRate: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_ShaperCfgSet(nRateShaperId, bEnable, bAVB, nCbs, nRate)
pyGSW_QoS_ShaperCfgSet = _PySwitchCli.pyGSW_QoS_ShaperCfgSet

def pyGSW_QoS_ShaperQueueAssign(nRateShaperId: 'u8', nQueueId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_ShaperQueueAssign(nRateShaperId, nQueueId)
pyGSW_QoS_ShaperQueueAssign = _PySwitchCli.pyGSW_QoS_ShaperQueueAssign

def pyGSW_QoS_ShaperQueueDeassign(nRateShaperId: 'u8', nQueueId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_ShaperQueueDeassign(nRateShaperId, nQueueId)
pyGSW_QoS_ShaperQueueDeassign = _PySwitchCli.pyGSW_QoS_ShaperQueueDeassign

def pyGSW_QoS_ShaperQueueGet(nQueueId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_QoS_ShaperQueueGet(nQueueId)
pyGSW_QoS_ShaperQueueGet = _PySwitchCli.pyGSW_QoS_ShaperQueueGet

def pyGSW_QoS_StormCfgGet() -> "int":
    return _PySwitchCli.pyGSW_QoS_StormCfgGet()
pyGSW_QoS_StormCfgGet = _PySwitchCli.pyGSW_QoS_StormCfgGet

def pyGSW_QoS_StormCfgSet(nMeterId: 'int', bBroadcast: 'ltq_bool_t', bMulticast: 'ltq_bool_t', bUnknownUnicast: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_QoS_StormCfgSet(nMeterId, bBroadcast, bMulticast, bUnknownUnicast)
pyGSW_QoS_StormCfgSet = _PySwitchCli.pyGSW_QoS_StormCfgSet

def pyGSW_QoS_WredCfgGet() -> "int":
    return _PySwitchCli.pyGSW_QoS_WredCfgGet()
pyGSW_QoS_WredCfgGet = _PySwitchCli.pyGSW_QoS_WredCfgGet

def pyGSW_QoS_WredCfgSet(eProfile: 'GSW_QoS_WRED_Profile_t', eThreshMode: 'GSW_QoS_WRED_ThreshMode_t', nRed_Min: 'u32', nRed_Max: 'u32', nYellow_Min: 'u32', nYellow_Max: 'u32', nGreen_Min: 'u32', nGreen_Max: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_WredCfgSet(eProfile, eThreshMode, nRed_Min, nRed_Max, nYellow_Min, nYellow_Max, nGreen_Min, nGreen_Max)
pyGSW_QoS_WredCfgSet = _PySwitchCli.pyGSW_QoS_WredCfgSet

def pyGSW_QoS_WredPortCfgGet(nPortId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_WredPortCfgGet(nPortId)
pyGSW_QoS_WredPortCfgGet = _PySwitchCli.pyGSW_QoS_WredPortCfgGet

def pyGSW_QoS_WredPortCfgSet(nPortId: 'u32', nRed_Min: 'u32', nRed_Max: 'u32', nYellow_Min: 'u32', nYellow_Max: 'u32', nGreen_Min: 'u32', nGreen_Max: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_WredPortCfgSet(nPortId, nRed_Min, nRed_Max, nYellow_Min, nYellow_Max, nGreen_Min, nGreen_Max)
pyGSW_QoS_WredPortCfgSet = _PySwitchCli.pyGSW_QoS_WredPortCfgSet

def pyGSW_QoS_WredQueueCfgGet(nQueueId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_WredQueueCfgGet(nQueueId)
pyGSW_QoS_WredQueueCfgGet = _PySwitchCli.pyGSW_QoS_WredQueueCfgGet

def pyGSW_QoS_WredQueueCfgSet(nQueueId: 'u32', nRed_Min: 'u32', nRed_Max: 'u32', nYellow_Min: 'u32', nYellow_Max: 'u32', nGreen_Min: 'u32', nGreen_Max: 'u32') -> "int":
    return _PySwitchCli.pyGSW_QoS_WredQueueCfgSet(nQueueId, nRed_Min, nRed_Max, nYellow_Min, nYellow_Max, nGreen_Min, nGreen_Max)
pyGSW_QoS_WredQueueCfgSet = _PySwitchCli.pyGSW_QoS_WredQueueCfgSet

def pyGSW_MulticastRouterPortAdd(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_MulticastRouterPortAdd(nPortId)
pyGSW_MulticastRouterPortAdd = _PySwitchCli.pyGSW_MulticastRouterPortAdd

def pyGSW_MulticastRouterPortRead(bInitial: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_MulticastRouterPortRead(bInitial)
pyGSW_MulticastRouterPortRead = _PySwitchCli.pyGSW_MulticastRouterPortRead

def pyGSW_MulticastRouterPortRemove(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_MulticastRouterPortRemove(nPortId)
pyGSW_MulticastRouterPortRemove = _PySwitchCli.pyGSW_MulticastRouterPortRemove

def pyGSW_MulticastSnoopCfgGet() -> "int":
    return _PySwitchCli.pyGSW_MulticastSnoopCfgGet()
pyGSW_MulticastSnoopCfgGet = _PySwitchCli.pyGSW_MulticastSnoopCfgGet

def pyGSW_MulticastSnoopCfgSet(eIGMP_Mode: 'GSW_multicastSnoopMode_t', bIGMPv3: 'ltq_bool_t', bCrossVLAN: 'ltq_bool_t', eForwardPort: 'GSW_portForward_t', nForwardPortId: 'u8', nClassOfService: 'u8', nRobust: 'u8', nQueryInterval: 'u8', eSuppressionAggregation: 'GSW_multicastReportSuppression_t', bFastLeave: 'ltq_bool_t', bLearningRouter: 'ltq_bool_t', bMulticastUnknownDrop: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_MulticastSnoopCfgSet(eIGMP_Mode, bIGMPv3, bCrossVLAN, eForwardPort, nForwardPortId, nClassOfService, nRobust, nQueryInterval, eSuppressionAggregation, bFastLeave, bLearningRouter, bMulticastUnknownDrop)
pyGSW_MulticastSnoopCfgSet = _PySwitchCli.pyGSW_MulticastSnoopCfgSet

def pyGSW_MulticastTableEntryAdd(nPortId: 'u32', eIPVersion: 'GSW_IP_Select_t', uIP_Gda: 'GSW_IP_t', uIP_Gsa: 'GSW_IP_t', eModeMember: 'GSW_IGMP_MemberMode_t') -> "int":
    return _PySwitchCli.pyGSW_MulticastTableEntryAdd(nPortId, eIPVersion, uIP_Gda, uIP_Gsa, eModeMember)
pyGSW_MulticastTableEntryAdd = _PySwitchCli.pyGSW_MulticastTableEntryAdd

def pyGSW_MulticastTableEntryRead(bInitial: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_MulticastTableEntryRead(bInitial)
pyGSW_MulticastTableEntryRead = _PySwitchCli.pyGSW_MulticastTableEntryRead

def pyGSW_MulticastTableEntryRemove(nPortId: 'u32', eIPVersion: 'GSW_IP_Select_t', uIP_Gda: 'GSW_IP_t', uIP_Gsa: 'GSW_IP_t', eModeMember: 'GSW_IGMP_MemberMode_t') -> "int":
    return _PySwitchCli.pyGSW_MulticastTableEntryRemove(nPortId, eIPVersion, uIP_Gda, uIP_Gsa, eModeMember)
pyGSW_MulticastTableEntryRemove = _PySwitchCli.pyGSW_MulticastTableEntryRemove

def pyGSW_CPU_PortCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_CPU_PortCfgGet(nPortId)
pyGSW_CPU_PortCfgGet = _PySwitchCli.pyGSW_CPU_PortCfgGet

def pyGSW_CPU_PortCfgSet(nPortId: 'u8', bCPU_PortValid: 'ltq_bool_t', bSpecialTagIngress: 'ltq_bool_t', bSpecialTagEgress: 'ltq_bool_t', bFcsCheck: 'ltq_bool_t', bFcsGenerate: 'ltq_bool_t', bSpecialTagEthType: 'GSW_CPU_SpecialTagEthType_t') -> "int":
    return _PySwitchCli.pyGSW_CPU_PortCfgSet(nPortId, bCPU_PortValid, bSpecialTagIngress, bSpecialTagEgress, bFcsCheck, bFcsGenerate, bSpecialTagEthType)
pyGSW_CPU_PortCfgSet = _PySwitchCli.pyGSW_CPU_PortCfgSet

def pyGSW_CapGet(nCapType: 'GSW_capType_t') -> "int":
    return _PySwitchCli.pyGSW_CapGet(nCapType)
pyGSW_CapGet = _PySwitchCli.pyGSW_CapGet

def pyGSW_CfgGet() -> "int":
    return _PySwitchCli.pyGSW_CfgGet()
pyGSW_CfgGet = _PySwitchCli.pyGSW_CfgGet

def pyGSW_CfgSet(eMAC_TableAgeTimer: 'GSW_ageTimer_t', bVLAN_Aware: 'ltq_bool_t', nMaxPacketLen: 'u16', bLearningLimitAction: 'ltq_bool_t', bMAC_SpoofingAction: 'ltq_bool_t', bPauseMAC_ModeSrc: 'ltq_bool_t', nPauseMAC_Src0: 'u8', nPauseMAC_Src1: 'u8', nPauseMAC_Src2: 'u8', nPauseMAC_Src3: 'u8', nPauseMAC_Src4: 'u8', nPauseMAC_Src5: 'u8') -> "int":
    return _PySwitchCli.pyGSW_CfgSet(eMAC_TableAgeTimer, bVLAN_Aware, nMaxPacketLen, bLearningLimitAction, bMAC_SpoofingAction, bPauseMAC_ModeSrc, nPauseMAC_Src0, nPauseMAC_Src1, nPauseMAC_Src2, nPauseMAC_Src3, nPauseMAC_Src4, nPauseMAC_Src5)
pyGSW_CfgSet = _PySwitchCli.pyGSW_CfgSet

def pyGSW_Disable() -> "int":
    return _PySwitchCli.pyGSW_Disable()
pyGSW_Disable = _PySwitchCli.pyGSW_Disable

def pyGSW_Enable() -> "int":
    return _PySwitchCli.pyGSW_Enable()
pyGSW_Enable = _PySwitchCli.pyGSW_Enable

def pyGSW_HW_Init(eInitMode: 'GSW_HW_InitMode_t') -> "int":
    return _PySwitchCli.pyGSW_HW_Init(eInitMode)
pyGSW_HW_Init = _PySwitchCli.pyGSW_HW_Init

def pyGSW_MDIO_CfgGet() -> "int":
    return _PySwitchCli.pyGSW_MDIO_CfgGet()
pyGSW_MDIO_CfgGet = _PySwitchCli.pyGSW_MDIO_CfgGet

def pyGSW_MDIO_CfgSet(nMDIO_Speed: 'u32', bMDIO_Enable: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_MDIO_CfgSet(nMDIO_Speed, bMDIO_Enable)
pyGSW_MDIO_CfgSet = _PySwitchCli.pyGSW_MDIO_CfgSet

def pyGSW_MDIO_DataRead(nAddressDev: 'u8', nAddressReg: 'u8') -> "int":
    return _PySwitchCli.pyGSW_MDIO_DataRead(nAddressDev, nAddressReg)
pyGSW_MDIO_DataRead = _PySwitchCli.pyGSW_MDIO_DataRead

def pyGSW_MDIO_DataWrite(nAddressDev: 'u8', nAddressReg: 'u8', nData: 'u16') -> "int":
    return _PySwitchCli.pyGSW_MDIO_DataWrite(nAddressDev, nAddressReg, nData)
pyGSW_MDIO_DataWrite = _PySwitchCli.pyGSW_MDIO_DataWrite

def pyGSW_MonitorPortCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_MonitorPortCfgGet(nPortId)
pyGSW_MonitorPortCfgGet = _PySwitchCli.pyGSW_MonitorPortCfgGet

def pyGSW_MonitorPortCfgSet(nPortId: 'u8', bMonitorPort: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_MonitorPortCfgSet(nPortId, bMonitorPort)
pyGSW_MonitorPortCfgSet = _PySwitchCli.pyGSW_MonitorPortCfgSet

def pyGSW_PortCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_PortCfgGet(nPortId)
pyGSW_PortCfgGet = _PySwitchCli.pyGSW_PortCfgGet

def pyGSW_PortCfgSet(nPortId: 'u8', eEnable: 'GSW_portEnable_t', bUnicastUnknownDrop: 'ltq_bool_t', bMulticastUnknownDrop: 'ltq_bool_t', bReservedPacketDrop: 'ltq_bool_t', bBroadcastDrop: 'ltq_bool_t', bAging: 'ltq_bool_t', bLearning: 'ltq_bool_t', bLearningMAC_PortLock: 'ltq_bool_t', nLearningLimit: 'u16', bMAC_SpoofingDetection: 'ltq_bool_t', eFlowCtrl: 'GSW_portFlow_t', ePortMonitor: 'GSW_portMonitor_t') -> "int":
    return _PySwitchCli.pyGSW_PortCfgSet(nPortId, eEnable, bUnicastUnknownDrop, bMulticastUnknownDrop, bReservedPacketDrop, bBroadcastDrop, bAging, bLearning, bLearningMAC_PortLock, nLearningLimit, bMAC_SpoofingDetection, eFlowCtrl, ePortMonitor)
pyGSW_PortCfgSet = _PySwitchCli.pyGSW_PortCfgSet

def pyGSW_PortLinkCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_PortLinkCfgGet(nPortId)
pyGSW_PortLinkCfgGet = _PySwitchCli.pyGSW_PortLinkCfgGet

def pyGSW_PortLinkCfgSet(nPortId: 'u8', bDuplexForce: 'ltq_bool_t', eDuplex: 'GSW_portDuplex_t', bSpeedForce: 'ltq_bool_t', eSpeed: 'GSW_portSpeed_t', bLinkForce: 'ltq_bool_t', eLink: 'GSW_portLink_t', eMII_Mode: 'GSW_MII_Mode_t', eMII_Type: 'GSW_MII_Type_t', eClkMode: 'GSW_clkMode_t', bLPI: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_PortLinkCfgSet(nPortId, bDuplexForce, eDuplex, bSpeedForce, eSpeed, bLinkForce, eLink, eMII_Mode, eMII_Type, eClkMode, bLPI)
pyGSW_PortLinkCfgSet = _PySwitchCli.pyGSW_PortLinkCfgSet

def pyGSW_PortPHY_AddrGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_PortPHY_AddrGet(nPortId)
pyGSW_PortPHY_AddrGet = _PySwitchCli.pyGSW_PortPHY_AddrGet

def pyGSW_PortPHY_Query(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_PortPHY_Query(nPortId)
pyGSW_PortPHY_Query = _PySwitchCli.pyGSW_PortPHY_Query

def pyGSW_PortRGMII_ClkCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_PortRGMII_ClkCfgGet(nPortId)
pyGSW_PortRGMII_ClkCfgGet = _PySwitchCli.pyGSW_PortRGMII_ClkCfgGet

def pyGSW_PortRGMII_ClkCfgSet(nPortId: 'u8', nDelayRx: 'u8', nDelayTx: 'u8') -> "int":
    return _PySwitchCli.pyGSW_PortRGMII_ClkCfgSet(nPortId, nDelayRx, nDelayTx)
pyGSW_PortRGMII_ClkCfgSet = _PySwitchCli.pyGSW_PortRGMII_ClkCfgSet

def pyGSW_PortRedirectGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_PortRedirectGet(nPortId)
pyGSW_PortRedirectGet = _PySwitchCli.pyGSW_PortRedirectGet

def pyGSW_PortRedirectSet(nPortId: 'u8', bRedirectEgress: 'ltq_bool_t', bRedirectIngress: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_PortRedirectSet(nPortId, bRedirectEgress, bRedirectIngress)
pyGSW_PortRedirectSet = _PySwitchCli.pyGSW_PortRedirectSet

def pyGSW_RMON_Clear(eRmonType: 'GSW_RMON_type_t', nRmonId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_RMON_Clear(eRmonType, nRmonId)
pyGSW_RMON_Clear = _PySwitchCli.pyGSW_RMON_Clear

def pyGSW_RMON_Port_Get(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_RMON_Port_Get(nPortId)
pyGSW_RMON_Port_Get = _PySwitchCli.pyGSW_RMON_Port_Get

def pyGSW_VersionGet(nId: 'u16') -> "int":
    return _PySwitchCli.pyGSW_VersionGet(nId)
pyGSW_VersionGet = _PySwitchCli.pyGSW_VersionGet

def pyGSW_WoL_CfgGet() -> "int":
    return _PySwitchCli.pyGSW_WoL_CfgGet()
pyGSW_WoL_CfgGet = _PySwitchCli.pyGSW_WoL_CfgGet

def pyGSW_WoL_CfgSet(nWolMAC0: 'u8', nWolMAC1: 'u8', nWolMAC2: 'u8', nWolMAC3: 'u8', nWolMAC4: 'u8', nWolMAC5: 'u8', nWolPassword0: 'u8', nWolPassword1: 'u8', nWolPassword2: 'u8', nWolPassword3: 'u8', nWolPassword4: 'u8', nWolPassword5: 'u8', bWolPasswordEnable: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_WoL_CfgSet(nWolMAC0, nWolMAC1, nWolMAC2, nWolMAC3, nWolMAC4, nWolMAC5, nWolPassword0, nWolPassword1, nWolPassword2, nWolPassword3, nWolPassword4, nWolPassword5, bWolPasswordEnable)
pyGSW_WoL_CfgSet = _PySwitchCli.pyGSW_WoL_CfgSet

def pyGSW_WoL_PortCfgGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_WoL_PortCfgGet(nPortId)
pyGSW_WoL_PortCfgGet = _PySwitchCli.pyGSW_WoL_PortCfgGet

def pyGSW_WoL_PortCfgSet(nPortId: 'u8', bWakeOnLAN_Enable: 'ltq_bool_t') -> "int":
    return _PySwitchCli.pyGSW_WoL_PortCfgSet(nPortId, bWakeOnLAN_Enable)
pyGSW_WoL_PortCfgSet = _PySwitchCli.pyGSW_WoL_PortCfgSet

def pyGSW_RegisterGet(nRegAddr: 'u16') -> "int":
    return _PySwitchCli.pyGSW_RegisterGet(nRegAddr)
pyGSW_RegisterGet = _PySwitchCli.pyGSW_RegisterGet

def pyGSW_RegisterSet(nRegAddr: 'u16', nData: 'u16') -> "int":
    return _PySwitchCli.pyGSW_RegisterSet(nRegAddr, nData)
pyGSW_RegisterSet = _PySwitchCli.pyGSW_RegisterSet

def pyGSW_IrqMaskGet(nPortId: 'u32') -> "int":
    return _PySwitchCli.pyGSW_IrqMaskGet(nPortId)
pyGSW_IrqMaskGet = _PySwitchCli.pyGSW_IrqMaskGet

def pyGSW_IrqMaskSet(nPortId: 'u32', eIrqSrc: 'GSW_irqSrc_t') -> "int":
    return _PySwitchCli.pyGSW_IrqMaskSet(nPortId, eIrqSrc)
pyGSW_IrqMaskSet = _PySwitchCli.pyGSW_IrqMaskSet

def pyGSW_PceRuleDelete(nIndex: 'u32') -> "int":
    return _PySwitchCli.pyGSW_PceRuleDelete(nIndex)
pyGSW_PceRuleDelete = _PySwitchCli.pyGSW_PceRuleDelete

def pyGSW_RMON_ExtendGet(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_RMON_ExtendGet(nPortId)
pyGSW_RMON_ExtendGet = _PySwitchCli.pyGSW_RMON_ExtendGet

def pyGSW_Reset(eReset: 'GSW_resetMode_t') -> "int":
    return _PySwitchCli.pyGSW_Reset(eReset)
pyGSW_Reset = _PySwitchCli.pyGSW_Reset

def pyGSW_TimestampPortRead(nPortId: 'u8') -> "int":
    return _PySwitchCli.pyGSW_TimestampPortRead(nPortId)
pyGSW_TimestampPortRead = _PySwitchCli.pyGSW_TimestampPortRead

def pyGSW_TimestampTimerGet() -> "int":
    return _PySwitchCli.pyGSW_TimestampTimerGet()
pyGSW_TimestampTimerGet = _PySwitchCli.pyGSW_TimestampTimerGet

def pyGSW_TimestampTimerSet(nSec: 'u32', nNanoSec: 'u32', nFractionalNanoSec: 'u32') -> "int":
    return _PySwitchCli.pyGSW_TimestampTimerSet(nSec, nNanoSec, nFractionalNanoSec)
pyGSW_TimestampTimerSet = _PySwitchCli.pyGSW_TimestampTimerSet
# This file is compatible with both classic and new-style classes.


